import unittest
import mysql.connector
from mysql.connector import Error

TEST_DB = "ukoly_test_db"

# üèóÔ∏è Vytvo≈ôen√≠ testovac√≠ datab√°ze (pokud neexistuje)
def vytvor_testovaci_databazi():
    try:
        conn = mysql.connector.connect(
            host="localhost",
            user="root",
            password="19611966"
        )
        cursor = conn.cursor()
        cursor.execute(f"CREATE DATABASE IF NOT EXISTS {TEST_DB} CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;")
        conn.commit()
        conn.close()
        print("‚úÖ Testovac√≠ datab√°ze p≈ôipravena.")
    except Error as e:
        print(f"Chyba p≈ôi vytv√°≈ôen√≠ testovac√≠ datab√°ze: {e}")

# üßπ Odstranƒõn√≠ testovac√≠ datab√°ze po skonƒçen√≠ test≈Ø
def smaz_testovaci_databazi():
    try:
        conn = mysql.connector.connect(
            host="localhost",
            user="root",
            password="19611966"
        )
        cursor = conn.cursor()
        cursor.execute(f"DROP DATABASE IF EXISTS {TEST_DB};")
        conn.commit()
        conn.close()
        print("üßπ Testovac√≠ datab√°ze byla odstranƒõna.")
    except Error as e:
        print(f"Chyba p≈ôi maz√°n√≠ testovac√≠ datab√°ze: {e}")

# üîå P≈ôipojen√≠ k testovac√≠ datab√°zi
def pripojeni_test_db():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="19611966",
        database=TEST_DB
    )

# üß± Vytvo≈ôen√≠ tabulky `ukoly` v testovac√≠ datab√°zi
def nastav_testovaci_tabulku(conn):
    cursor = conn.cursor()
    cursor.execute(f"""
        CREATE TABLE IF NOT EXISTS ukoly (
            id INT AUTO_INCREMENT PRIMARY KEY,
            nazev VARCHAR(255) NOT NULL CHECK (nazev <> ''),
            popis TEXT NOT NULL CHECK (popis <> ''),
            stav ENUM('nezah√°jeno', 'hotovo', 'prob√≠h√°') DEFAULT 'nezah√°jeno',
            datum_vytvoreni TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()

# üß™ Testovac√≠ t≈ô√≠da
class TestUkoly(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        vytvor_testovaci_databazi()
        cls.conn = pripojeni_test_db()
        nastav_testovaci_tabulku(cls.conn)

    def setUp(self):
        self.cursor = self.conn.cursor()
        self.cursor.execute("DELETE FROM ukoly")
        self.conn.commit()

    # ‚úÖ P≈ôid√°n√≠ √∫kolu ‚Äì pozitivn√≠
    def test_pridat_ukol_validni(self):
        self.cursor.execute("""
            INSERT INTO ukoly (nazev, popis, stav)
            VALUES (%s, %s, %s)
        """, ("Testovac√≠ √∫kol", "Popis", "nezah√°jeno"))
        self.conn.commit()
        self.cursor.execute("SELECT COUNT(*) FROM ukoly WHERE nazev = 'Testovac√≠ √∫kol'")
        self.assertEqual(self.cursor.fetchone()[0], 1)

    # ‚ùå P≈ôid√°n√≠ √∫kolu ‚Äì negativn√≠ (pr√°zdn√Ω popis)
    def test_pridat_ukol_prazdny_popis(self):
        with self.assertRaises(Error):
            self.cursor.execute("""
                INSERT INTO ukoly (nazev, popis)
                VALUES (%s, %s)
            """, ("Nƒõco", ""))
            self.conn.commit()

    # ‚úÖ Aktualizace √∫kolu ‚Äì pozitivn√≠
    def test_aktualizovat_ukol_validni(self):
        self.cursor.execute("INSERT INTO ukoly (nazev, popis) VALUES (%s, %s)", ("Aktualizace", "Test"))
        self.conn.commit()
        self.cursor.execute("SELECT id FROM ukoly WHERE nazev = 'Aktualizace'")
        ukol_id = self.cursor.fetchone()[0]
        self.cursor.execute("UPDATE ukoly SET stav = 'hotovo' WHERE id = %s", (ukol_id,))
        self.conn.commit()
        self.cursor.execute("SELECT stav FROM ukoly WHERE id = %s", (ukol_id,))
        self.assertEqual(self.cursor.fetchone()[0], 'hotovo')

    # ‚ùå Aktualizace √∫kolu ‚Äì negativn√≠ (neexistuj√≠c√≠ ID)
    def test_aktualizovat_ukol_neexistujici(self):
        self.cursor.execute("UPDATE ukoly SET stav = 'hotovo' WHERE id = -1")
        self.conn.commit()
        self.assertEqual(self.cursor.rowcount, 0)

    # ‚úÖ Odstranƒõn√≠ √∫kolu ‚Äì pozitivn√≠
    def test_odstranit_ukol_validni(self):
        self.cursor.execute("INSERT INTO ukoly (nazev, popis) VALUES (%s, %s)", ("Smazat", "√ökol"))
        self.conn.commit()
        self.cursor.execute("SELECT id FROM ukoly WHERE nazev = 'Smazat'")
        ukol_id = self.cursor.fetchone()[0]
        self.cursor.execute("DELETE FROM ukoly WHERE id = %s", (ukol_id,))
        self.conn.commit()
        self.cursor.execute("SELECT COUNT(*) FROM ukoly WHERE id = %s", (ukol_id,))
        self.assertEqual(self.cursor.fetchone()[0], 0)

    # ‚ùå Odstranƒõn√≠ √∫kolu ‚Äì negativn√≠ (neexistuj√≠c√≠ ID)
    def test_odstranit_ukol_neexistujici(self):
        self.cursor.execute("DELETE FROM ukoly WHERE id = -999")
        self.conn.commit()
        self.assertEqual(self.cursor.rowcount, 0)

    @classmethod
    def tearDownClass(cls):
        cls.conn.close()
        smaz_testovaci_databazi()
        print("‚úÖ Testy dokonƒçeny a datab√°ze odstranƒõna.")


# ‚ñ∂Ô∏è Spu≈°tƒõn√≠ test≈Ø
if __name__ == "__main__":
    unittest.main()